---
layout: post
title: Simple Google Maps with Jekyll and JQuery
tags: 
- Jekyll
- JQuery
- Google
- events
description: Version 3 of Google's Mapping API makes it very simple to add maps to your site. I'll show you how to do something basic for a Jekyll site.
---
Google's latest version of their "Mapping API":http://code.google.com/apis/maps/documentation/javascript/ is really great. Mainly, it's nice that I don't have to worry about API keys and can make very simple calls to get maps formatted exactly how I want. 

I recently started putting events on my website and I wanted to include a simple map on the page. You could also change the code pretty easily to show many locations on a single map if you wanted. Once you start playing around with it, the sky is the limit.

To start, I created a new layout called @event@. The template will be able to make use of certain YAML attributes if it finds them. I'll get back to the template in a minute.

Once I know I have a particular type of post that uses an @event@ template, I created some YAML front matter attributes on the post itself. Here's an example: 

{% highlight text %}
layout: event
location:
  address: 218 W 15th St, NY, NY
  latitude: 40.7396183
  longitude: -74.00017439999999
{% endhighlight %}

If you have the address, you can just use that value and skip the latitude and longitude. But if you don't have the address, but you have a particular set of coordinates, you can skip the address.

Now that your content is aware of a location, we need to send that to the @event@ template that you created in your @_layouts@ directory. 

On my site, I always want the map to show on the right-hand side of the page â€“ separate from the content. The only thing that we have to render on the page is a paragraph tag with the location information in it. JQuery and Google Maps will handle the rest. Here's the snippet of code I have in my @event@ template.

{% highlight html %}{% literal %}
{% if page.location %}
<div class="box">
  <p id="map" style="height: 300px" address="{{ page.location.address }}" latitude="{{ page.location.latitude }}" longitude="{{ page.location.longitude }}">&nbsp;</p>
</div>
{% endif %}
{% endliteral %}{% endhighlight %}

At this point, if you rendered the site, you would get an empty paragraph where the map should be. The information about the location should be showing up as attributes of that paragraph, but nothing is displayed to the end user yet. Now it's time to work Google Maps into the equation. 

First of all, make sure that Google Maps is being loaded by putting this in your main layout file:

{% highlight html %}
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"></script>
{% endhighlight %}

Next, it's time to create your custom JQuery code to translate that HTML you created into an actual map. I created a file called (creatively enough) @maps.js@ and put a reference to it in my main layout file. Here's the entirety of that file:

{% highlight html %}
var geocoder;
var map;

function initialize() {
  geocoder = new google.maps.Geocoder();
  var latlng = new google.maps.LatLng(0, 0);
  var myOptions = {
    zoom: 15,
    center: latlng,
    mapTypeControl: false,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  }
  map = new google.maps.Map(document.getElementById("map"), myOptions);
  map.setCenter(latlng);
}

$(document).ready ( function() {

  $("#map").each(function() {
  
    geocoder = new google.maps.Geocoder();

    address = $(this).attr('address');
    latitude = $(this).attr('latitude');
    longitude = $(this).attr('longitude');

    initialize();
    
    geocoder.geocode( { 'address': address}, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {

        map.setCenter(results[0].geometry.location);
        var marker = new google.maps.Marker({
          map: map, 
          position: results[0].geometry.location
        });

      } else if (latitude && longitude) {

        var latlng = new google.maps.LatLng(latitude, longitude);    
        var marker = new google.maps.Marker({
          map: map,
          position: latlng 
        });
    
        map.setCenter(latlng);

      } else {
        alert("Geocode was not successful for the following reason: " + status);
      }
    });

  });

});
{% endhighlight %}

To translate this into English, it says that when the page loads, look for any elements that have an id of "map". For each one that it finds, pull the address and coordinates out of the tag. The address is given priority. If it finds that value, it sends it to Google to be geocoded, otherwise it tries using the latitude and longitude. If you would like to change the qualities of the map (like the map type, the starting zoom, etc.) look in the @initialize@ function. 

With this code, it's not that difficult to add multiple markers to one page, but I'll leave that to you to write. In fact, there's a lot more you could do with this, such as adding bubbles to the map markers. This is just something to get you started. The documentation and examples from Google are quite good.

You can see an example "here":/events/sample-event.